#set($layout = "layout/emptyLayout.vm" )##
#set($assets=$!{UrlBroker.getUrl('domain.assets')})##
#set($assetsVersion=$!{UrlBroker.version})##
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
        <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">
        <title>用户解冻</title>
        <script>
            var json_parse = (function () {
                "use strict";

                var at,     // The index of the current character
                    ch,     // The current character
                    escapee = {
                        '"': '"',
                        '\\': '\\',
                        '/': '/',
                        b: '\b',
                        f: '\f',
                        n: '\n',
                        r: '\r',
                        t: '\t'
                    },
                    text,

                    error = function (m) {
                        throw {
                            name: 'SyntaxError',
                            message: m,
                            at: at,
                            text: text
                        };
                    },

                    next = function (c) {
                        if (c && c !== ch) {
                            error("Expected '" + c + "' instead of '" + ch + "'");
                        }

                        ch = text.charAt(at);
                        at += 1;
                        return ch;
                    },

                    number = function () {
                        var number,
                            string = '';

                        if (ch === '-') {
                            string = '-';
                            next('-');
                        }
                        while (ch >= '0' && ch <= '9') {
                            string += ch;
                            next();
                        }
                        if (ch === '.') {
                            string += '.';
                            while (next() && ch >= '0' && ch <= '9') {
                                string += ch;
                            }
                        }
                        if (ch === 'e' || ch === 'E') {
                            string += ch;
                            next();
                            if (ch === '-' || ch === '+') {
                                string += ch;
                                next();
                            }
                            while (ch >= '0' && ch <= '9') {
                                string += ch;
                                next();
                            }
                        }
                        number = +string;
                        if (!isFinite(number)) {
                            error("Bad number");
                        } else {
                            return number;
                        }
                    },

                    string = function () {
                        var hex,
                            i,
                            string = '',
                            uffff;

                        if (ch === '"') {
                            while (next()) {
                                if (ch === '"') {
                                    next();
                                    return string;
                                }
                                if (ch === '\\') {
                                    next();
                                    if (ch === 'u') {
                                        uffff = 0;
                                        for (i = 0; i < 4; i += 1) {
                                            hex = parseInt(next(), 16);
                                            if (!isFinite(hex)) {
                                                break;
                                            }
                                            uffff = uffff * 16 + hex;
                                        }
                                        string += String.fromCharCode(uffff);
                                    } else if (typeof escapee[ch] === 'string') {
                                        string += escapee[ch];
                                    } else {
                                        break;
                                    }
                                } else {
                                    string += ch;
                                }
                            }
                        }
                        error("Bad string");
                    },

                    white = function () {
                        while (ch && ch <= ' ') {
                            next();
                        }
                    },

                    word = function () {
                        switch (ch) {
                        case 't':
                            next('t');
                            next('r');
                            next('u');
                            next('e');
                            return true;
                        case 'f':
                            next('f');
                            next('a');
                            next('l');
                            next('s');
                            next('e');
                            return false;
                        case 'n':
                            next('n');
                            next('u');
                            next('l');
                            next('l');
                            return null;
                        }
                        error("Unexpected '" + ch + "'");
                    },

                    value,  

                    array = function () {
                        var array = [];

                        if (ch === '[') {
                            next('[');
                            white();
                            if (ch === ']') {
                                next(']');
                                return array;  
                            }
                            while (ch) {
                                array.push(value());
                                white();
                                if (ch === ']') {
                                    next(']');
                                    return array;
                                }
                                next(',');
                                white();
                            }
                        }
                        error("Bad array");
                    },

                    object = function () {
                        var key,
                            object = {};

                        if (ch === '{') {
                            next('{');
                            white();
                            if (ch === '}') {
                                next('}');
                                return object;   // empty object
                            }
                            while (ch) {
                                key = string();
                                white();
                                next(':');
                                if (Object.hasOwnProperty.call(object, key)) {
                                    error('Duplicate key "' + key + '"');
                                }
                                object[key] = value();
                                white();
                                if (ch === '}') {
                                    next('}');
                                    return object;
                                }
                                next(',');
                                white();
                            }
                        }
                        error("Bad object");
                    };

                value = function () {
                    white();
                    switch (ch) {
                    case '{':
                        return object();
                    case '[':
                        return array();
                    case '"':
                        return string();
                    case '-':
                        return number();
                    default:
                        return ch >= '0' && ch <= '9' 
                            ? number() 
                            : word();
                    }
                };

                return function (source, reviver) {
                    var result;

                    text = source;
                    at = 0;
                    ch = ' ';
                    result = value();
                    white();
                    if (ch) {
                        error("Syntax error");
                    }

                    return typeof reviver === 'function'
                        ? (function walk(holder, key) {
                            var k, v, value = holder[key];
                            if (value && typeof value === 'object') {
                                for (k in value) {
                                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                                        v = walk(value, k);
                                        if (v !== undefined) {
                                            value[k] = v;
                                        } else {
                                            delete value[k];
                                        }
                                    }
                                }
                            }
                            return reviver.call(holder, key, value);
                        }({'': result}, ''))
                        : result;
                };
            }());

            function ajaxHttp(){
                var p = arguments.callee.prototype;
                var init = function() {
                    if(window.XMLHttpRequest) {
                        p.xmlhttp = new XMLHttpRequest();
                    } else if(window.ActiveXObject) {
                        try {
                            p.xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                        } catch(ee) {
                            p.xmlhttp = new ActiveXObject("MSXML2.XMLHTTP")
                        }
                    }
                }
                
                var res = function() {
                    if(!p.xmlhttp) {
                        init();
                    } 
                    return p.xmlhttp;  
                }

                return res();
            }	

            function submit(){
                var form = document.getElementById("form");
                var url = form.getAttribute("action");
                var ans = document.getElementById("answer"); 
                var ansName = ans.getAttribute("name");
                var ansValue = ans.value || 0;

                var http = ajaxHttp();
                http.onreadystatechange = doResult;
                http.open("GET",url+"?"+ ansName + '=' + ansValue);
                http.send();
                return false;
            }

            function doResult() {
                var http = ajaxHttp();
                if (http.readyState == 4) {
                    if (http.status == 200) {
                        var json = json_parse(http.responseText);
                        if(json.success){
                            window.location.href = json.result.direct;
                        } else {
                            document.getElementById("res").innerHTML = json.msg;
                        }
                    } else {
                        document.getElementById("res").innerHTML = "验证码输入错误";
                    }
                }
            }
        </script>
    </head>
    <body>
        <div class="main">

            <div class="header">
                <div class="wrap page_header">
                    <div class="logo">
                        <a href="/">
                            <span class="l_name"></span>
                            <span class="l_website"></span>
                            <span class="l_slogan"></span>
                        </a>
                    </div>
                </div>
            </div>



            <div class="login_panel">
                    <div class="mod_login">
                        <div class="login_form index_login clearfix" style="text-align:center">
                            <h3>您的访问过于频繁，请输入下列验证码计算结果解冻</h3><br/>
                                <img src="/userx/identity/rationality/validation/image" /><br/><br/>
                                <form action="/userx/identity/rationality/validation/action/$!blackKey" id="form" onsubmit="return false;">
                                    <input type="text" name="code" id="answer" value="" style="text-align:center"/>&nbsp;&nbsp;<span id="res"></span><br/><br/>
                                </form>
                                    <input type="button" value="提交" onclick="submit()" style="width: 100px; height: 30px;"/>
                        </div>
                    </div>
            </div>

        </div>
    </body>
</html>